TODO:

1. Practice numeric type promotion when evaluating expressions with primitive variable types.
2. Learn by hearth order of precedence table for operators in Java.
3. Watch for overflow and underflow.


Terminology:

operator - symbol that can be applied to a set of variables, values, or literals

variables, values, or literals - operands

Operators are applied to operands and returns a result

Operator 								Symbols and examples
Post-unary operators 					expression++, expression--
Pre-unary 								operators ++expression, --expression
Other unary operators 					-, !, ~, +, (type)
Multiplication/division/modulus 		*, /, %
Addition/subtraction 					+, -
Shift operators 						<<, >>, >>>
Relational operators 					<, >, <=, >=, instanceof
Equal to/not equal to 					==, !=
Logical operators 						&, ^, | //NEED TO BE LEARNED
Short-circuit logical operators 		&&, ||
Ternary operators boolean expression 	? expression1 : expression2
Assignment operators 					=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=

*In general, three flavors of operators are available in Java: unary, binary, and ternary. These types of operators can be applied to one, two, or three operands, respectively

--------------------------------------

Operator Precedence

Operator 												Symbols and examples									Precedence order

Post-unary operators 									expression++, expression--								Highest
Pre-unary operators 									++expression, --expression
Other unary operators 									-, !,  (type for casting)
Multiplication/division/modulus 						*, /, %
Addition/subtraction 									+, -
Relational operators 									<, >, <=, >=, instanceof
Equal to/not equal to 									==, !=
Logical operators 										&, ^, |
Short-circuit logical operators 						&&, ||
Ternary operators 										boolean expression ? expression1 : expression2			
Assignment operators 									=, +=, -=, *=, /=										Lowest

U - unarni
B - binarni 
R - relacioni
L - logicki
T - ternarni
D - dodela
--------------------------------------

UNARY OPERATOR: !, +, -, ++, --, (type) [when casting; Casting is a unary operation where one data type is explicitly interpreted as another data type] 

boolean isAnimalAsleep = false;
System.out.println(isAnimalAsleep); // false
isAnimalAsleep = !isAnimalAsleep;
System.out.println(isAnimalAsleep); // true

int pelican = !5; // DOES NOT COMPILE
boolean penguin = -true; // DOES NOT COMPILE
boolean peacock = !0; // DOES NOT COMPILE

int parkAttendance = 0;
System.out.println(parkAttendance); // 0
System.out.println(++parkAttendance); // 1
System.out.println(parkAttendance); // 1
System.out.println(parkAttendance--); // 1
System.out.println(parkAttendance); // 0

int lion = 3;
int tiger = ++lion * 5 / lion--;
System.out.println("lion is " + lion);
System.out.println("tiger is " + tiger);
lion is 3
tiger is 5

--------------------------------------

BINARY OPERATOR: *, /, +, -, %

Numeric Promotion Rules

Keyword 		Type 						Example
boolean 	true or false 					true
byte 		8-bit integral value 			123
char 		16-bit Unicode value (unsigned) 'a' //only 0 and positives
short 		16-bit integral value 			123
int 		32-bit integral value 			123
long 		64-bit integral value 			123L
float 		32-bit floating-point value 	123.45f
double		64-bit floating-point value 	123.456


You need to memorize certain rules Java will follow when applying
operators to data types:

Numeric Promotion Rules:

1.  If two values have different data
types, Java will automatically promote one of the values to the
larger of the two data types.

2. If one of the values is integral and the other is floating-point, Java  
will automatically promote the integral value to the floating-point
value’s data type. **** [(integral) ---promotion---> floating-point]

3. Smaller data types, namely, byte, short, and char, are first
promoted to int any time they’re used with a Java binary
arithmetic operator, even if neither of the operands is int.  **** [(byte/short/char) ---promotion---> int]

4. After all promotion has occurred and the operands have the same
data type, the resulting value will have the same data type as its
promoted operands.

//What is the data type of z?
int x = 1;
long y = 33; 
var z = x * y;

//What is the data type of x + y?
double x = 39.21;
float y = 2.1;
var z = x + y;

//digresion float d = 12; float dd = 12.0f; DOES COMPILE

//What is the data type of z?
short w = 14;
float x = 13;
double y = 30;
var z = w * x / y;

byte test = 7 * 10; //7 and 10 are by defualt promoted to ints and since their product is 70 which fits into byte then this expression DOES COMPILE


However, this:

int hat = 2;
short boots = 2 + hat; //DOES NOT COMPILE
nor this
byte hat = 1;
short boots = 2 + hat;

When working with values, the compiler
had enough information to determine the writer’s intent. When working with variables,
though, there is ambiguity about how to proceed, so the compiler reports an error.
--------------------------------------

Assigning Values

**Java will automatically promote from smaller to larger data types, as
you saw in the previous section on arithmetic operators, but it will
throw a compiler exception if it detects that you are trying to convert
from larger to smaller data types without casting.


Larager = smaller //OKAY
Smaller = larger //DOES NOT COMPILE

*Larager -> also called: widening data type

int tadpole = (int)5.0 * 2L; // DOES NOT COMPILE
short melody = (byte)(double)(a *= 2); //LEGAL

1. 5.0 is being casted to int, that is ok
2. Then there is numeric type promotion int * long, promotes int to long 
3. We then have int tadpole = long * long; //DOES NOT COMPILE

Reviewing Primitive Assignments from Chapter 2
int fish = 1.0; // DOES NOT COMPILE
short bird = 1921222; // DOES NOT COMPILE
int mammal = 9f; // DOES NOT COMPILE
long reptile = 192301398193810323; // DOES NOT COMPILE

Remember, casting primitives is required any time you are going from a larger numerical data type to a smaller numerical
data type, or converting from a floating-point number to an integral value.
int trainer = (int)1.0;
short ticketTaker = (short)1921222; // Stored as 20678
int usher = (int)9f;
long manager = 192301398193810323L; //  **** long manager = (long) 192301398193810323;//  DOES NOT COMPILE - the value is first interpreted as an int by the compiler and is out of range


Compound Assignment Operators

long goat = 10;
int sheep = 5;
sheep = sheep * goat; // DOES NOT COMPILE

However

long goat = 10;
int sheep = 5;
sheep *= goat;  // DOES COMPILE

The compound operator will first cast sheep to a long, apply the
multiplication of two long values, and then cast the result to an int.
****	VERY IMPORTANT	  *****
sheep = (int) ( (long) sheep * goat )

Assignment Operator Return Value

long wolf = 5;
long coyote = (wolf=3);
System.out.println(wolf); // 3
System.out.println(coyote); // 3
The key here is that (wolf=3) does two things. First, it sets the value of
the variable wolf to be 3. Second, it returns a value of the assignment,
which is also 3.

long rabbit = 3;
System.out.println((rabbit=53)); // DOES COMPILE

boolean bear = false;
boolean polar = (bear = true);
System.out.println(polar); // true

int gg = 22;
int camel;
camel += gg; // DOES NOT COMPILE

int camel += gg; // DOES NOT COMPILE

instanceof Operator

[reference type o] 								[interface type or a class or an enum on the right hand side]
		a 				instanceof 										b     
Returns true if the reference that 'a' points to is an instance of a class, subclass, or class that implements a particular interface, as named in 'b' 

public static void openZoo(Number time) {
        if (time instanceof String){ //Inconvertible types; cannot cast 'java.lang.Number' to 'java.lang.String' DOES NOT COMPILE
            System.out.println();
        }
}

null and the instanceof operator

 For the exam, you should know that calling instanceof on the null literal or a null reference always returns false.
 
System.out.print(null instanceof Object);
Object nullObjectHere = null;
System.out.print(nullObjectHere instanceof String);

Example does not compile, since null is used on the right side of the instanceof operator:
System.out.print(null instanceof null); // DOES NOT COMPILE



--------------------------------------
Logical Operators


& Logical AND is true only if both values are true.
| Inclusive OR is true if at least one of the values is true.
^ Exclusive XOR is true only if one value is true and the other is false.

		int x = 2;
		int y = 4;
		
		if (++x < 2 & y++ < 4) { //both sides are executed, even tho the first one is evaluated to false;
			System.out.println("asd");
		}
		System.out.println(x); //3
		System.out.println(y); //5
		
		if (x == 3 | y++ == 3) { //both sides are executed, even tho the first one is evaluated to true;
			
		}
		
		System.out.println(x); //
		System.out.println(y); // 6?

--------------------------------------

Ternary Expression and Unperformed Side Effects

int sheep = 1;
int zzz = 1;
int sleep = zzz<10 ? sheep++ : zzz++;
System.out.print(sheep+","+zzz); // 2,1

int sheep = 1;
int zzz = 1;
int sleep = sheep>=10 ? sheep++ : zzz++;
System.out.print(sheep+","+zzz); // 1,2


--------------------------------------

pITANJE 7, 14: Da li radi short circuiting kod logical operators & | ^




