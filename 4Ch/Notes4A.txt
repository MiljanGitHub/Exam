
If-Else

3: int temperature = 4;
4: long humidity = -temperature + temperature * 3;
5: if (temperature>=4)
6: if (humidity < 6) System.out.println("Too Low");
7: else System.out.println("Just Right");
8: else System.out.println("Too High"); 

//valid format for the exam


 if((col + row) % 2 == 0) ; //DOES COMPILE

--------------------------------------


Switch //Added new stuff for Java 17

	switch(variableToTest){ //Parenthesis required
		case constantExpresion1:
			//...
			break;  //optional
		case constantExpresion2, constantExpression3:
			//...
			break;  //optional
		...
		default: //optional
	} // ; semi-colon not required
	
**** The definition of the default block, it
is branched to only if there is no matching case value for the switch
statement, regardless of its position within the switch statement.
	
	
switch (month) {} //legal

The following is a list of all data types supported by switch statements:
	-int and Integer
	-byte and Byte
	-char and Character
	-short and Short
	-String
	-enum values
	-var (if the type resolves to one of the preceding types)

Example1:

        int dayOfWeek = 5;
        switch(dayOfWeek) {
            default:
                System.out.println("Weekday");
                break;
            case 0:
                System.out.println("Sunday");
                break;
            case 6:
                System.out.println("Saturday");
                break;
        }
		
		//Weekday
		
Example2:

        var dayOfWeek = 5;
        switch(dayOfWeek) {
            case 0:
                System.out.println("Sunday");
            default:
                System.out.println("Weekday");
            case 6:
                System.out.println("Saturday");
                break;
        } 
		//There is no matching 'case' so the code will jump to the default block and then execute all of the proceeding case statements in order until it
        //finds a break statement or finishes the switch statement:
		
		//Weekday Saturday
		
Example3:

        var dayOfWeek = 6;
        switch(dayOfWeek) {
            case 0:
                System.out.println("Sunday");
            default:
                System.out.println("Weekday");
            case 6:
                System.out.println("Saturday");
                break;
        }
		
		//There is a matching 'case' so the code jump to that block and executes it.
		//Saturday

Example4:

        var dayOfWeek = 6;
        switch(dayOfWeek) {
            case 0:
                System.out.println("Sunday");
            case 6:
                System.out.println("Saturday");
            default:
                System.out.println("Weekday");
        }
		//There is a matching 'case' so the code jump to that block and executes it, in this case there is no break so deafault branch is reached
		//Saturday
		//Weekday
		
Example5:

        var dayOfWeek = 6;
        switch(dayOfWeek) {
		    case 6:
                System.out.println("Saturday");
            case 0:
                System.out.println("Sunday");
            default:
                System.out.println("Weekday");
        }		
		//Saturday
		//Sunday
		//Weekday
		
Example6:		

		var dayOfWeek = 0;
        switch(dayOfWeek) {
            case 0:
                System.out.println("Sunday");
            default:
                System.out.println("Weekday");
            case 6:
                System.out.println("Saturday");
                break;
        }		
		//Sunday
		//Weekday
		//Saturday
		
Example7:

		var dayOfWeek = 0;
        TEST: switch(dayOfWeek) {
            case 6:
                System.out.println("Saturday");
                break TEST;
        }

Example8:

		int otherDay = day;
        switch(otherDay) {
            
            case DayOfWeek.MONDAY: return DayOfWeek.MONDAY; // DOES NOT COMPILE
        }

Example9:

		switch month { // DOES NOT COMPILE
			case 1: System.out.print("January");
		}
		
		switch(month) // DOES NOT COMPILE
			case 1: System.out.print("January");
			
		switch(month) {
			case 1: 2: System.out.print("January"); // DOES NOT COMPILE; statement does not compile because a comma (,) should be used to separate combined case statements, not a colon (:).
		}
		
Example10:

 printSeason(2) is called?
public void printSeason(int month) {
 switch(month) {
 case 1, 2, 3: System.out.print("Winter");
 case 4, 5, 6: System.out.print("Spring");
 default: System.out.print("Unknown");
 case 7, 8, 9: System.out.print("Summer");
 case 10, 11, 12: System.out.print("Fall");
 } } 



Example11:

		int k = 17;
		switch (k) {
		case 1, 7, 8 -> 2;  // DOES NOT COMPILES; Cannot use switch expression structure without a variable where to assigne returned value
		default: System.out.println("default"); //and must use -> to return value, an int
		};
		
Example12:

 void findZookeeper(Long id) {
            System.out.print(switch(id) { //DOES NOT COMPILE; Long is not supported in switch
                 case 10 -> {"Jane"}
                 case 20 -> {yield "Lisa";};
                 case 30 -> "Kelly";
                 case 30 -> "Sarah";
                 default -> "Unassigned";
                 });
             }
Example13:

 var tailFeathers = 3;
 final var one = 1;
 switch (tailFeathers) {
          case one: System.out.print(3 + " "); //DOES COMPILE; It is allowed for final var to be in case since it is final and compiler figures it out that is Integer
          default: case 3: System.out.print(5 + " ");
 }


		
Acceptable Case Values for Switch structure

First off, the values in each case statement must be compile-time
constant values of the same data type as the switch value. This means
you can use only literals, enum constants, or final constant variables of
the same data type. By final constant, we mean that the variable must
be marked with the final modifier and initialized with a literal value
in the same expression in which it is declared. For example, you canâ€™t
have a case statement value that requires executing a method at
runtime, even if that method always returns the same value. 		
		
        final int getCookies() { return 4; }
        void feedAnimals() {
            final int bananas = 1;
            int apples = 2;
            int numberOfAnimals = 3;
            final int cookies = getCookies();
            switch (numberOfAnimals) {
                case bananas: // COMPILES
                case apples: // DOES NOT COMPILES
                case getCookies(): // DOES NOT COMPILE
                case cookies : // DOES NOT COMPILE
                case 3 * 5 : // COMPILES
            }
        }

    void test(String firstName, final String lastName){
        final String suffix = "JR";

        switch(firstName) {
            case "Test":
                return;
            case suffix:
                int id = 0;
                break;
            case lastName: // DOES NOT COMPILE; despite lastName being final, it is not constant as it is passed to the function;  
							//variable is marked final, it is not a compile-time constant initialized with a literal value which is required for a switch statement, as any int value can be passed in at runtime.
                id = 8;
                break;
        }
    }


IMPORTANT for understanding switch structure:
     
		short size = 4;
        final int small = 15;
        final int big = 1_000_000;
        switch(size) {
            case small: //the compiler can easily cast small (variable) from int to short (data-type) at compile-time because the value 15 is small enough to fit inside a short (data-type).
                        //This would not be permitted if small (variable) was not a compile-time constant
            case 1+2 : //it can convert the expression 1+2 from int (data-type) to short (data-type) at compile-time.
            case big: // DOES NOT COMPILE; 1_000_000 is too large to fit inside of short without an explicit cast	
			
		
		
		final char a = 'A', e = 'E';
        char grade = 'B';
        switch (grade) {
            default:
            case  a:
            case 'B':  'C': System.out.print("great ");  // DOES NOT COMPILE; missing CASE before 'C'
            case 'D': System.out.print("good "); break;
            case  e:
            case 'F': System.out.print("not good ");
        }

The switch Expression - capable of returning a value

For starters, we can now assign the result of a switch expression to a variable 'result'
For this to work, all case and default branches must return a data type that is compatible with the assignment

Example1:

		int k = 5;
		int ff = switch (k) { //DOES NOT COMPILE; switch expression should have default case; the switch expression does not cover all possible input values
		case 1 -> 2; 
		
		};
		System.out.println(ff); 
		
		if Switch expression is used with enums and if all cases are covered, then no need for default branch:
		
		enum Color{RED, BLUE};
		
		Color c = Color.BLUE;
		 Color cr = switch (c) {
		 case RED -> Color.RED;
		 case BLUE -> Color.BLUE;
		 }; //DOES COMPILE
		 
		 Color c = Color.BLUE;
		 Color cr = switch (c) {
		 case Color.RED -> Color.RED;
		 case Color.BLUE -> Color.BLUE;
		 }; //DOES NOT COMPILE; cases must be marked with 'RED' and 'BLUE'
		 
		 printLocation(Animal.MAMMAL)
		  enum Animal {BIRD, FISH, MAMMAL}
			void printLocation(Animal a) {
            long type = switch(a) {
                case BIRD -> 1;
                case FISH -> 2;
                case MAMMAL -> 3;
                default -> 4; //IS ALLOWED/OPTIONAL; DOES COMPILE
                };
            System.out.print(type);
             } }
		

Example2:

		int k = 5;
		int ff = switch (k) {
		
		case 1 -> 2;
		default -> 23;
		}; //semi-colon ; is required
		System.out.println(ff); //DOES COMPILE
		
Example3:

		int k = 5;
		int ff = switch (k) {
		case 1 -> 2; //DOES NOT COMPILE
		case 1 -> 2; 
		default -> 23;
		};
		
		int k = 5;
		int ff = switch (k) {
		case 1 -> 2; //DOES NOT COMPILE
		case 1, 2 -> 2;
		default -> 23;
		};
		
		int k = 5;
		int ff = switch (k) {
		case 1, 2 -> 2; //DOES NOT COMPILE
		case 1 -> 2;
		default -> 23;
		};

Example4:	
	
		int k = 5;
		int ff = switch (k) {
		case 1, 7, 8 -> 2;
		case  2-> 2;
		default -> 23;
		};
		System.out.println(ff); //23  //DOES COMPILE
		
Example5:		

		
		int k = 5;
		int ff = switch (k) {
		case 1, 7, 8 -> 2;
		case  2: return 2; //DOES NOT COMPILE
		default -> 23;
		};

Example6:

		int k = 5;
		int ff = switch (k) {
		case 1, 7, 8 -> 2;
		case  2 -> 2;
		case 23 -> {
			
			if (true) yield 21;
			yield 25;
		}
		default -> 23;
		};
		
		System.out.println(ff); 	 //DOES COMPILE	
		
Example7:

Switching int and returning String

public void printDayOfWeek(int day) {
 var result = switch(day) {
 case 0 -> "Sunday";
 case 1 -> "Monday";
 case 2 -> "Tuesday";
 case 3 -> "Wednesday";
 case 4 -> "Thursday";
 case 5 -> "Friday";
 case 6 -> "Saturday";
 default -> "Invalid value";
};
}

Example8:

var result = switch(bear) {
 case 30 -> "Grizzly"  //DOES NOT COMPILE; needed ;
 default -> "Panda" //DOES NOT COMPILE; needed ;
} //DOES NOT COMPILE; needed ;

**On three places are ; required		
		
Example9:	

		int measurement = 10;
		int size = switch(measurement) {
		 case 5 -> 1;
		 case 10 -> (short)2;
		 default -> 5;
		 case 20 -> "3"; // DOES NOT COMPILE
		 case 40 -> 4L; // DOES NOT COMPILE
		 case 50 -> null; // DOES NOT COMPILE
		};	
		
		int measurement = 10;
		var size = switch(measurement) {
		 case 5 -> 1;
		 case 10 -> (short)2;
		 default -> 5;
		 case 20 -> "3"; 
		 case 40 -> 4L; 
		 case 50 -> null; 
		 // DOES  COMPILE
		};

Example10:

		int fish = 5;
		int length = 12;
		var name = switch(fish) {
			case 1 -> "Goldfish";
			case 2 -> {yield "Trout";}
			case 3 -> {
				if(length > 10) yield "Blobfish";
				else yield "Green";
				}
			default -> "Swordfish";
			}; 		// DOES  COMPILE

Example11:

		int fish = 5;
		int length = 12;
		var name = switch(fish) {
			case 1 -> "Goldfish";
			case 2 -> {} // DOES NOT COMPILE yield are required in block; 
			case 3 -> {
				if(length > 10) yield "Blobfish";
				//DOES NOT COMPILE; yield are required in block;  yield statements are not optional if the switch statement returns a value.
				}
			default -> "Swordfish";
			}; 

Example12:
		
		**IMPORTANT
		
		int fish = 22;
		var name = switch(fish) {
		 case 1 -> "Goldfish" // DOES NOT COMPILE (missing semicolon)
		 case 2 -> {yield "Trout";}; // DOES NOT COMPILE (extra semicolon)
		 default -> 21; //If everything else compiled, and that we omited 'default', that would also be a compile error
		 } // DOES NOT COMPILE (missing semicolon)
		
--------------------------------------

***the continue statement
transfers control to the boolean expression that determines if the loop
should continue. In other words, it ends the current iteration of the
loop. Also, like the break statement, the continue statement is applied
to the nearest inner loop under execution using optional label
statements to override this behavior

--------------------------------------

The while loop

//Parenthesis required in booleanExpression

		 double iguana = 0;
         do {
           int snake = 1;
           System.out.print(snake++ + " ");
           iguana--;
           } while (snake <= 5);  // DOES NOT COMPILE; The variable snake is declared within the body of the do/while statement, so it is out of scope for booleanExpression
         System.out.println(iguana);

--------------------------------------

The For loop 

//Parenthesis required in booleanExpression


for (initialization; booleanExpression; updateStatment){ //curly braces are required if there are multiple statements in the body and are optional if there is one or none statement
	//body
}

1. Initialization statement executes
2. If booleanExpression is true then continue to next step, else exit loop
3. Body executese
4. Execute update statement
5. Return to step 2.

for( ; ; ) //infinit loop compiles
	System.out.println("Hello World");

for (; x < 16; ){
System.out.println("telo.."); x++;
}; 

int x = 10;
int k = 22;
for (; ; ){
k--;
if (x == k) break;
};
	
Adding Multiple Terms to the for Statement

int x = 0;
for(long y = 0, z = 4; x < 5 && y < 10; x++, y++) {
	System.out.print(y + " "); }
System.out.print(x + " ");

Redeclaring a Variable in the Initialization Block

int x = 0;
for(int x = 4; x < 5; x++) { // DOES NOT COMPILE
	System.out.print(x + " ");
}

int x = 0;
for(x = 0; x < 5; x++) {  // DOES COMPILE
	System.out.print(x + " "); 

Using Incompatible Data Types in the Initialization Block

int x = 0;
for(long y = 0, int z = 4; x < 5; x++) { // DOES NOT COMPILE; and since for( ; ;) is minimum construct for ForLoop, it is not possible to do for(long y = 0; int z = 4; x < 5; x++)
	System.out.print(y + " ");
}
The variables in the initialization block must all be of the same type. In the multiple terms example, y and z were both long, so the code compiled without issue, but in this example they have
differing types, so the code will not compile.

for (int i=0, int j=3; i<weather.length; ++i) { // DOES NOT COMPILE i and j don't have shared primitive type
	//body
}

int x = 0;
for(int y, k = 4; y < 5; x++) { //DOES NOT COMPILE; y might not be initialized; but on its own: int p, l = 3; This DOES COMPILES
     System.out.print(y + " ");
 }

Using Loop Variables Outside the Loop

for(long y = 0, x = 4; x < 5 && y < 10; x++, y++) {
    System.out.print(y + " ");
}
System.out.print(x); // DOES NOT COMPILE


Modifying Loop Variables

for(int i=0; i<10; i++) //infinite
	i = 0;

for(int j=1; j<10; j++) //infinite
	j--;
	
for(int k=0; k<10; ) //valid with no updateStatment
	k++;


The for-each Loop

//Parenthesis required


for (Datatype instanceName : collection){ //curly braces are required if there are multiple statements in the body and are optional if there is one or none statement
	//body
}

The for-each loop declaration is composed of an initialization section
and an object to be iterated over. The right side of the for-each loop
must be one of the following:

-A built-in Java array
-An object whose type implements java.lang.Iterable

For the exam, you should know that this does not include all of the Collections
Framework classes or interfaces, but only those that implement or
extend that Collection interface. For example, Map is not supported in
a for-each loop, although Map does include methods that return
Collection instances.


String[] names = new String[3];

for (String string : strings2)
System.out.print(string + " "); //DOES COMPILE

for (String string : strings2):
System.out.print(string + " "); //DOES NOT COMPILE

A var may also be
used for the variable type declaration, with the specific type
determined by the right side of the for-each statement. On each
iteration of the loop, the named variable on the left side of the
statement is assigned a new value from the array or collection on the
right side of the statement.


final String[] names = new String[3];
names[0] = "Lisa"; names[1] = "Kevin"; names[2] = "Roger";
for(var name : names) { //Legal
    System.out.print(name + ", ");
}

Adding Optional Labels

if statements, switch statements, and loops is that they can all have optional labels. A
label is an optional pointer to the head of a statement that allows the
application flow to jump to it or break from it. It is a single identifier
that is proceeded by a colon (:). For example, we can add optional
labels to one of the previous examples:

 int[][] myComplexArray = {{5,2,1,3},{3,9,8,9},{5,7,12,7}};
 
        OUTER_LOOP: for(int[] mySimpleArray : myComplexArray) {
            INNER_LOOP: for(int i=0; i<mySimpleArray.length; i++) {
                System.out.print(mySimpleArray[i]+"\t");
            }
            System.out.println();
        }

int frog = 15;
BAD_IDEA: if(frog>10)
EVEN_WORSE_IDEA: {
 frog++;
}


OPTIONAL_LABEL : while (booleanExpression){
	
	//Body
	
	//Somewhere in the body
	break OPTIONAL_LABEL;
}

for(var penguin : new int[2])
System.out.println(penguin);	//The data type of penguin is int not a Integer; 

var ostrich = new Character[3]; //The data type of emu is Character not a char; 
for(var emu : ostrich)


List parrots = new ArrayList();
for(var macaw : parrots)
System.out.println(macaw);  //parrots has a data type of List. Since no generic type is used, the default type is a List of Object
							//values, and macaw will have a data type of Object, making option 'The data type of macaw is Object' correct.



break statement can take an optional label parameter. Without a label parameter, the break statement will
terminate the nearest inner loop (if we are dealing with nested loops) it is currently in the process of executing. 

        //In the following example, we search for the
        // first (x,y) array index position of a number within an unsorted twodimensional array:
        
           
        int[][] list = {{1,13},{5,2},{2,2}};
        int searchValue = 2;
        int positionX = -1;
        int positionY = -1;
        PARENT_LOOP: for(int i=0; i<list.length; i++) {
            for(int j=0; j<list[i].length; j++) {
                if(list[i][j]==searchValue) {
                    positionX = i;
                    positionY = j;
                    break PARENT_LOOP;
                }
            }
        }
        if(positionX==-1 || positionY==-1) {
            System.out.println("Value "+searchValue+" not found");
        } else {
            System.out.println("Value "+searchValue+" found at: " +
                    "("+positionX+","+positionY+")");
        }

a) Remove PARENT_LOOP on line 334, and see what is the outcome
b) Remove break statement on line 334, and see what is the outcome


 int count = 0;
 BUNNY: for(int row = 1; row <=3; row++) //no curly braces valid for-loop
	RABBIT: for(int col = 0; col <3 ; col++) {
		if((col + row) % 2 == 0)
			__________;
		count++;
	}
 System.out.println(count); 



Unreachable Code - any statements immediately following a break, continue, or return statement

        int checkDate = 0;
        while(checkDate<10) {
            checkDate++;
            if(checkDate>100) {
                break;
                checkDate++; // DOES NOT COMPILE
            }
        }
		
		int minute = 1;
        WATCH: while(minute>2) {
            if(minute++>2) {
                continue WATCH;
                System.out.print(minute); // DOES NOT COMPILE
            }
        }
        int hour = 2;
        switch(hour) {
            case 1: return; hour++; // DOES NOT COMPILE
            case 2:
        }
		
		
--------------------------------------

Pattern matching



The pattern matching form of instanceof is shown here:
objref instanceof type pattern-var

The variable data in this example is referred to as the pattern variable. Notice that this
code also avoids any potential ClassCastException because the cast operation is executed
only if the implicit instanceof operator returns true.

Flow scoping means a pattern variable is only accessible if the compiler can discern its
type. Pattern matching with an if statement is implemented using the instanceof operator

Example1:

void compareIntegers(Number number) {
 if(number instanceof Integer data) {
	System.out.print(data.compareTo(5));
 }
}

Example2:
if(number instanceof Integer data) {
 data = 10; // DOES COMPILE, but is a bad practice
 }

to avoid it: 
if(number instanceof final Integer data) {
 data = 10; // DOES NOT COMPILE
 }
 
Example3: 

Weâ€™re using the pattern variable in an expression in the
same line in which it is declared.
 void printIntegersGreaterThan5(Number number) {
 if(number instanceof Integer data && data.compareTo(5)>0)
 System.out.print(data);
}

Example4:

The type of the pattern variable must be a subtype of the variable on the left side of the expression. It also cannot be the same type
 
Integer value = 123;
if(value instanceof Integer) {}
if(value instanceof Integer data) {} // DOES NOT COMPILE; because pattern matching requires that the pattern variable type Integer be a strict subtype of Integer.

Example5:

Number value = 123;
 if(value instanceof List) {}
 if(value instanceof List data) {} //DOES COMPILE; explanation in chapter 7
 
 
 Flow Scoping - means the variable is only in scope when the compiler can definitively determine its type. It is determined by the compiler based on the branching and flow of the program.
 
 Example1:
 
 void printIntegersOrNumbersGreaterThan5(Number number) {
 if(number instanceof Integer data || data.compareTo(5)>0)
 System.out.print(data); //DOES NOT COMPILE
} 

If the input does not inherit Integer, the data variable is undefined. Since the compiler
cannot guarantee that data is an instance of Integer, data is not in scope, and the code
does not compile

Example2:

	void printOnlyIntegers(Number number) {
		 if (!(number instanceof Integer data))
		 return;
		 System.out.print(data.intValue());   //DOES COMPILE
    } 
The method returns if the input does not inherit Integer. This means that when the last line of
the method is reached, the input must inherit Integer, and therefore data stays in scope
even after the if statement ends.

Previous example2 is being transformed by th compile to this:

void printOnlyIntegers(Number number) {
 if (number instanceof Integer data) System.out.print(data.intValue());
 else return;
 }
 
 That's way in example2 data.intValue()  //DOES COMPILE
 
 Example3:
 
		if ((myObj instanceof Integer data) && data < 0) {
			 //DOES COMPILE
		 }
		 
		 if ((myObj instanceof Integer data) & data < 0) { //this is not a short-circuit operator; hence both sides are evaluated and left side my evaluate to 
			 //false, making data not being an Integer and cannot be used with comparison operator
			 //DOES NOT COMPILE
		 }

--------------------------------------