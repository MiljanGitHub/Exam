
Access Modifiers - An access modifier determines what classes a method can be accessed from

private  - The private modifier means the method can be called only from within the same class.

Package Access - With package access, the method can be called only from a class in
the same package. This one is tricky because there is no keyword. You simply omit the
access modifier. Package access is sometimes referred to as package-private or default
access (even within this book!).

protected - The protected modifier means the method can be called only from a class in the same package or a subclass.

public - The public modifier means the method can be called from anywhere.

TABLE 5.1 Parts of a method declaration in Figure 5.1
Element 					Value in nap() example 				Required?
Access modifier 				public 								No
Optional specifier 				final 								No
Return type 					void 								Yes
Method name 					nap 								Yes
Parameter list 				(int minutes) 							Yes, but can be empty parentheses
Method signature 			metodName(int minutes) 					Yes
Exception list 				throws InterruptedException 			No
Method body 				{										Yes, except for abstract methods
							// take a nap
							}    


Optional specifieres


Optional specifiers for methods Modifier 						Description 
static 															Indicates the method is a member of the shared class object

abstract 														Used in an abstract class or interface when the method body is excluded

final 															Specifies that the method may not be overridden in a subclass

default 														Used in an interface to provide a default implementation of a method for classes that implement the interface

synchronized 													Used with multithreaded code 

native 															Used when interacting with code written in another language, such as C++

strictfp 														Used for making floating-point calculations portable 



Return Type

The next item in a method declaration is the return type. It must appear after any access
modifiers or optional specifiers and before the method name. The return type might be an
actual Java type such as String or int. If there is no return type, the void keyword is used

Method Signature

A method signature, composed of the method name and parameter list, is what Java uses
to uniquely determine exactly which method you are attempting to call. It’s important to note that the names of the parameters in the method signature are not
used as part of a method signature.

public class Trip {
 public void visitZoo(String name, int waitTime) {}
 public void visitZoo(String attraction, int rainFall) {} // DOES NOT COMPILE -  these two methods have the same signature and cannot be declared within the same class.
}


Effectively Final Variables

An effectively final local variable is one that is not modified after it is assigned.

This means
that the value of a variable doesn’t change after it is set, regardless of whether it is explicitly
marked as final. If you aren’t sure whether a local variable is effectively final, just add the
final keyword. If the code still compiles, the variable is effectively final.

11: public String zooFriends() {
12: String name = "Harry the Hippo";
13: var size = 10;
14: boolean wet;
15: if(size > 100) size++;
16: name.substring(0);
17: wet = true;
18: return name;
19: }


Instance Variable Modifiers

Like methods, instance variables can use access modifiers, such as private, package, protected,
and public.


final - Specifies that the instance variable must be initialized with each instance of the class exactly once. If an instance variable is
		marked final, then it must be assigned a value when it is declared or when the object is instantiated. The compiler does not apply a default value to final variables
		
		public class PolarBear {
		final int age = 10;
		final int fishEaten;
		final String name;
		{ fishEaten = 10; } // fishEaten must be initialized either or in constructor
		public PolarBear() {
		name = "Robert";
		}
}
volatile - Instructs the JVM that the value in this variable may be modified by other threads 
transient - Used to indicate that an instance variable should not be serialized with the class


Creating Methods with Varargs

Rules for Creating a Method with a Varargs Parameter
1. A method can have at most one varargs parameter.
2. If a method contains a varargs parameter, it must be the last parameter in the list.

public void walk1(int... steps) {}
 public void walk2(int start, int... steps) {}
 public void walk2(int start, int ...steps) {}
 public void walk2(int start, int ... steps) {}
 public void walk3(int... steps, int start) {} // DOES NOT COMPILE
 public void walk4(int... start, int... steps) {} // DOES NOT COMPILE
 
static void fly(int[] lengths) {}
static void fly2(int... lengths) {} 

	public static void main(String[] args) {
	
		fly(1,2,3); //DOES NOT COMPILE
		fly(new int[] { 1, 2, 3 }); //DOES COMPILE
		
		fly2(1,2,3); //DOES COMPILE
		fly2(new int[] { 1, 2, 3 }); //DOES COMPILE
	}


--------------------------------------

Protected Access


package pond.shore;
public class Bird {
 protected String text = "floating";
 protected void floatInWater() {
 System.out.print(text); // protected access is ok
 }
}


package pond.shore;
public class Eagle extends Bird {
 
	//Eagle is extending Bird

	public void throughReference(){

		//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case)
		// - We are in a same package as a target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a target type ('Bird' in this case)
																																																																																																					
		Bird b = new Bird();																																															
		
		b.floatInWater(); //DOES COMPILE //Referring to protected members through reference variable of type which has those protected member is OK.
		System.out.print(b.text); //same here
		
		Eagle e = new Eagle(); //DOES COMPILE
		e.floatInWater();
																																																									
	}																																																							
																																																							
	public void withoutReference(){
																																																							
																																																							
		//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case) 																	
		// - We are in a same package as a target class ('Bird' in this case) 																	
		// - Trying to access protected members without a reference variable of a target type ('Bird' in this case) 																	

		floatInWater(); //DOES COMPILE //Referring to protected members (of superclass) without reference variable of type which has those protected member is OK.  																	
		System.out.print(text); //same here
		
	}
}

package pond.shore;
public class Pigeon  {
 
	
	public void withBirdReference(){

		//Preconditions:
		// - We are not in a subclass of a target class ('Bird' in this case)
		// - We are in a same package as a target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a target type ('Bird' in this case)

		Bird b = new Bird();
		b.floatInWater(); //DOES COMPILE //Referring to protected members of a type whose reference variable we are using and which has those protected member is OK. 
		System.out.print(b.text); //same here
		
	}

	public void withBirdSubclassReferences(){

		//Preconditions:
		// - We are not in a subclass of a target class ('Bird' in this case)
		// - We are in a same package as a target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a subclass of a target type ('Bird' in this case)

		Eagle e = new Eagle();
		e.floatInWater(); //DOES COMPILE
		System.out.print(e.text); 
		
	}

}


package pond.shore;
public class TestMain{

public static void main(String[] args) {


		//Preconditions:
		// - We are not in a subclass of a target class ('Bird' in this case)
		// - We are in a same package as a target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a target type ('Bird' in this case)
		

	Bird b = new Bird();
	String t = b.text; //DOES COMPILE

		//Preconditions:
		// - We are not in a subclass of a target class ('Bird' in this case)
		// - We are in a same package as a target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a subclass of a target type ('Bird' in this case)


	Eagle e = new Eagle();
	String t1= e.text; //DOES COMPILE

	Bird be = new Eagle();
	be.floatInWater(); //DOES COMPILE

}


package pond.goose;
import pond.shore.Bird;
import pond.shore.Eagle;
public class Goose extends Bird {
 
	public void withoutReference(){

		//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case)
		// - We are in a different package then target class ('Bird' in this case)
		// - Trying to access protected members without a reference variable of a target type ('Bird' in this case)
		
		floatInWater(); //DOES COMPILE 
		//System.out.print(text); //same here
		
	}
	
	public void throughItsOwnReference(){
		//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case)
		// - We are in a different package then target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a (this) current defined subclass of a target type ('Bird' in this case)
		
		/*
		 * If we were to define a subclass of Goose such as 'public class Goosling extends Goose{}', we could do the following within this class:
		 * 
		 * public void test(){
		 * 		Goosling ss = new Goosling();
		 *		ss.floatInWater(); //DOES COMPILE
		 * }
		 */
		
		Goose g = new Goose();
		g.floatInWater(); //DOES COMPILE 
		System.out.print(g.text); //same here
	}

	public void throughTargetReference(){
		//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case)
		// - We are in a different package then target class ('Bird' in this case)
		// - Trying to access protected members through a reference variable of a target type ('Bird' in this case)
		
		Bird b = new Bird();
		//b.floatInWater(); //DOES NOT COMPILE  'floatInWater() has protected access in Bird'; DOES NOT COMPILE
		//System.out.print(b.text); //same here
		
		Bird be = new Eagle();
		// be.floatInWater(); //DOES NOT COMPILE 
		
		
	}
	
	public void throughOtherSubclassReference(){
	//Preconditions:
		// - We are in a subclass of a target class ('Bird' in this case)
		// - We are in a different package then target class ('Bird' in this case)
		// - Trying to access protected members by using a reference variable of a subclass of a target type ('Bird' in this case)
		Eagle e = new Eagle();
		//e.floatInWater(); //DOES NOT COMPILE 
		//System.out.print(e.text); //same here
	}
	
	public void testPackageScopedMethodFromSuperclass() {
		//packageMetod(); //DOES NOT COMPILE 
		Bird b = new Bird();
		//b.packageMetod(); //DOES NOT COMPILE 
		
		Goose g = new Goose();
		//g.packageMetod(); //DOES NOT COMPILE 
	}
	

}


package pond.goose;

public class Goosling extends Goose{

}


package pond.goose;

import pond.shore.Bird;
import pond.shore.Eagle;

public class TestMain {
	
	
	public static void main(String[] args) {
		
		Bird b = new Bird();
		//b.floatInWater(); //DOES NOT COMPILE, 
		
		Goose g = new Goose();
		//g.floatInWater(); //DOES NOT COMPILE, 
		
		Eagle e = new Eagle();
		//e.floatInWater(); //DOES NOT COMPILE, 

		Bird be = new Eagle();
		//be.floatInWater(); //DOES NOT COMPILE, 
		
		Bird bg = new Goose();
		//bg.floatInWater(); //DOES NOT COMPILE, 
	}
}



Reviewing Access Modifiers
Make sure you know why everything in Table 5.4 is true. Use the first column for the
first blank and the first row for the second blank. Also, remember that a member is a
method or field.

TABLE 5.4 A method in ______ can access a ______ member.  A method in can access a member.


																private 			package 			protected 				public
the same class 		 											 Yes 				  Yes 				   Yes 					 Yes

another class in the same package 								 No 				  Yes 				   Yes 					 Yes

a subclass in a different package 								 No 				   No 				   Yes 					 Yes

an unrelated class in a different package 						 No 				   No 					No 					 Yes


the same class:
1.  A method in the same class can access a private member. - Yes
2.  A method in the same class can access a package member. - Yes
3.  A method in the same class can access a protected member. - Yes
4.  A method in the same class can access a public member. - Yes

another class in the same package:
1.  A method in another class in the same package can access a private member. - No
2.  A method in another class in the same package can access a package member. - Yes
3.  A method in another class in the same package can access a protected member. - Yes
4.  A method in another class in the same package can access a public member. - Yes

a subclass in a different package:
1.  A method in a subclass in a different package can access a private member. - No
2.  A method in a subclass in a different package can access a package member. - No
3.  A method in a subclass in a different package can access a protected member. - Yes
4.  A method in a subclass in a different package can access a public member. - Yes

an unrelated class in a different package
1.  A method in an unrelated class in a different package can access a private member. - No
2.  A method in an unrelated class in a a different package can access a package member. - No
3.  A method in an unrelated class in a a different package can access a protected member. - No
4.  A method in an unrelated class in a a different package can access a public member. - Yes

--------------------------------------
Static

Three important rules:

1. Iz Static metode ne mozes da pozivas non-static/instance metodu. Moras da imas "objekat" nad kojim pozivas.
2. Static variable ne mogu da koriste instance variable
3. Static variable se mogu koristiti i u static i u non-static/instance metodama
4. static final variables (konstante) must be initialzed after they are declared OR they must be initialzed in static block

	
	private static int one;
	private static final int two;
	private static final int three = 3;
	private static final int four; // DOES NOT COMPILE
	static {
	one = 1;
	two = 2;
	three = 3; // DOES NOT COMPILE
	two = 4; // DOES NOT COMPILE
	}
	
	
	

--------------------------------------