Classes and Inheritance

class B {
class A{}
 class Animal {
    String a;
    public static void main(String[] args) {

        class Test2 {} //Compiler generates ---> Animal$1Test2.class
        class Test {}  //Compiler generates ---> Animal$1Test.class
       
    }
    
    void test() {
    	 class Test3 {
    		 class Test {}
    	 }
    }
    
    class Test3 {}
    class Test {} //Compiler generates ---> Animal$Test.class

	class B{} //DOES NOT COMPILE
}
}

In another class which is in the same package:

public static void main(String[] args) {
		
		B b; //DOES COMPILE
		A a;  //DOES COMPILE
		Test3 t;  //DOES NOT COMPILE
	}

// Bear.java ***
class Bird {}
class Bear {}
class Fish {} 
//DOES COMPILE

// ClownFish.java
protected class ClownFish{} // DOES NOT COMPILE
// BlueTang.java
private class BlueTang {} // DOES NOT COMPILE


this
The 'this' reference refers to the current instance of the
class and can be used to access any member of the class, including inherited members. It can
be used in any instance method, constructor, or instance initializer block. It cannot be used
when there is no implicit instance of the class, such as in a static method or static initializer
block.

this vs super Example

class Insect {
protected int numberOfLegs = 4;
String label = "buggy";
}

public class Beetle extends Insect {
protected int numberOfLegs = 6;
short age = 3;
public void printData() {
 System.out.println(this.label); //Looks in current and within inheritance tree (superclasses); DOES COMPILE
 System.out.println(super.label); //Only looks in superclasses; DOES COMPILE
 System.out.println(this.age); //Finds it in current class;  DOES NOT COMPILE
 System.out.println(super.age); //Only looks in superclasses; DOES NOT COMPILE
 System.out.println(numberOfLegs); //DOES COMPILE  //Looks in current and within inheritance tree (superclasses); Java checks outward, starting with the narrowest scope. 
												  //For this reason, the value of numberOfLegs in the Beetle class is used, and 6 is printed. 
												 //In this example, this.numberOfLegs and super.numberOfLegs refer to different variables with distinct values.; 
 }
 public static void main(String []n) {
 new Beetle().printData();
 }
 }
 
 *** Remember, while 'this' includes current and inherited members, 'super' only includes inherited members.
 
 
 
 constructors
 
public class DemoMain {
	
	public DemoMain(int i) {};
	
	public static void main(String[] args) {
		DemoMain dm = new DemoMain(); //DOES NOT COMPILE - compiler only inserts the default constructor when no constructors are defined.
	}
	***Having only private constructors in a class tells the compiler not to
	   provide a default no-argument constructor. It also prevents other classes
	   from instantiating the class. This is useful when a class has only static
	   methods or the developer wants to have full control of all calls to create
	   new instances of the class.
}

 
this()


public class Hamster {
 private String color;
 private int weight;
  public Hamster() {}
 public Hamster(int weight, String color) { // First constructor
 this.weight = weight;
 this.color = color;
 }
 public Hamster(int weight) { // Second constructor
 this.weight = weight;
 color = "brown";
 }
  void test() {
		 this() //DOES NOT COMPILE
  }
}


***public Hamster(int weight) { // Second constructor
 this(weight, "brown");
 }
 
 When this() is used with parentheses, Java calls another
constructor on the same instance of the class.
Despite using the same keyword, this and this() are very different. The first, 'this',
refers to an instance of the class, while the second, 'this()', refers to a constructor call
within the class. The exam may try to trick you by using both together, so make sure you
know which one to use and why. Calling this() has one special rule you need to know. If you choose to call it, the this() call
must be the first statement in the constructor. The side effect of this is that there can be only
one call to this() in any constructor.

public Hamster(int weight) { //Second constructor
 
    this(weight, "color");
	System.out.println("obj");	
    this(weight, "aaa"); //DOES NOT COMPILE
	
}

public Hamster(int weight) { //Second constructor
 
	System.out.println("obj");	
    this(weight, "color"); //DOES NOT COMPILE
	
}
or
public Hamster(int weight) { //Second constructor
 
    this(weight, "color"); //DOES COMPILE
	System.out.println("obj");
}
or
public Hamster(int weight) { //Second constructor
 
    this(); //DOES COMPILE
	System.out.println("obj");
	 this.weight = weight;
}

public Hamster(int weight) { // Second constructor
	 
	this(weight);	 //DOES NOT COMPILE
}

**Cannot have multiple this() only single this() and it must be first line within constructor; and it cannot call 'itself' using this()

The compiler and cyclic this():

public class Gopher {
 public Gopher(int dugHoles) {
 this(5); // DOES NOT COMPILE
 }
}

public class Gopher {
 public Gopher() {
 this(5); // DOES NOT COMPILE
 }
 public Gopher(int dugHoles) {
 this(); // DOES NOT COMPILE; if we comment out this line, then code compiles OR other line 'this(5);' then code again compiles. Notice we have two compile errors
 }
} 

Rukes for constructors:

■ A class can contain many overloaded constructors, provided the signature for each is distinct.
■ The compiler inserts a default no-argument constructor if no constructors are declared.
■ If a constructor calls this(), then it must be the first line of the constructor.
■ Java does not allow cyclic constructor calls.


--------------------------------------

super()

class Mammal{
	//public Mammal() {System.out.println("ff");} DEAFULT CONSTRUCTOR IS NOT CREATED ***
	public Mammal(int i) {System.out.println("aa");}
	public Mammal(int i, String ff) {System.out.println("ff");}
	public int weight;
}

public class Hamster extends Mammal{
	
	 private String color;
	 private int weight;
	 
	 public Hamster() { this(2, "ffg");}
	 
	 public Hamster(int weight, String color) { // First constructor
		 this(1);

	 }
	 public Hamster(int weight) { // Second constructor
		 super(2, ""); //In case we are not using this() such as current 'public Hamster(int weight) {...}' constructor, java automatically inserts super() if we don't specify and super method call, as we did with 'super(2, "");'	 	
	 }
	 
	 public Hamster(long kk) {
		 super(1,"fFG");
	 }
	 
	 void test() {
		 super(1); //DOES NOT COMPILE
	 }
	 
	 public static void main(String[] args) {
		new Hamster(2,  "");
	}
	 
}
*** The first statement of every constructor is a call to a parent constructor using super() or another constructor in the class using this(). They cannot be together. super() must be on the first line if this() is not used, and vice-reversed.

*** In every subclass constructor implicit super() call is made by the compiler. Obviously, it tries to call no-arg super constructor if it exists. Superclass no-args constructor will not be created
if there is already definde any other superclass constructor. And if that constructor doesn't exist, calls from constructors in a subclass to a superclass no-arg constructor won't be made and we get DOES NOT COMPILE error. 
In that case you have to find appropriate overloaded superclass constructor and call it with super(params1, paramsN) or manually define a default constructor in a superclass.


■ The first line of every constructor is a call to a parent constructor using super() or an overloaded constructor using this().
■ If the constructor does not contain a this() or super() reference, then the compiler automatically inserts super() with no arguments as the first line of the constructor.
■ If a constructor calls super(), then it must be the first line of the constructor


--------------------------------------

Initializing Classes with inheritance and static

***First, we initialize the class, which involves invoking all static members in the class hierarchy, starting with the
highest superclass and working downward. This is sometimes referred to as loading the class. 

The most important rules with class initialization is that it happens at most once for each class.

The Java Virtual Machine (JVM) controls when the class is initialized, although you can
assume the class is loaded before it is used. The class may be initialized when the program
first starts, when a static member of the class is referenced, or shortly before an instance of
the class is created

Initialize Class X
1. If there is a superclass Y of X, then initialize class Y first.
2. Process all static variable declarations in the order in which they appear in the class.
3. Process all static initializers in the order in which they appear in the class.


**Fields and instance initializer blocks are run in the order in which
they appear in the file.

**The constructor runs after all fields and instance initializer blocks
have run.

Evauluate order of initialization for static members in inheritance hierarchy:

Follow all three cases!!!

public class Test{
	static {
		 System.out.println("in Test static block upper");
	 }
	 private Helper h1 = new Helper("pera");
	 private static Helper h = new Helper();
	 private static final int x = test32();
	 private String color;
	 
	 {
			System.out.println("Upper block Test");
		}
	 
	 static int test32() {
		 System.out.println("in test32...");
		 return 2;
	 }
	 
	 public static void main(String[] args) {
		 System.out.println("From test main");
		 new Exam();
		 /*
		  * 'new Exam();' will output:
		  * 
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in Exam static block upper
			in helper constructor3: djura
			in Exam getObj...
			in Exam static block lower
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			in helper constructor2: 5
			Upper block Exam
			Lower block Exam
			No arg constructor Exam
		  */
		
		 
		 //new Test();
		 /*
		  * 'new Test();' will output:
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in helper constructor3: pera
			Upper block Test
			Lower block Test

		  * 
		  */
		 
		// Exam.main(null);
		 /*
		  * 'Exam.main(null);' will output: *** TRICKY!!! static/initialization happens only once
		  * 
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in Exam static block upper
			in helper constructor3: djura
			in Exam getObj...
			in Exam static block lower
			From Exam main
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			in helper constructor2: 5
			Upper block Exam
			Lower block Exam
			No arg constructor Exam


		  */
	}
	 
	 {
			System.out.println("Lower block Test");
		}
	 
	 static {
		 System.out.println("in Test static block lower");
	 }
}

class Exam extends Test{
	
	 static {
		 System.out.println("in Exam static block upper");
	 }
	
	 private Helper h = new Helper(5);
	  {
		 System.out.println("Upper block Exam");
	 }
		 private static Helper h2 = new Helper("djura");
	 static Object x = getObj();
			 
			 
	 static Object getObj() {
		 System.out.println("in Exam getObj...");
		 return null;
	 }
	 
	 static {
		 System.out.println("in Exam static block lower");
	 }
	 
	 public Exam() {
		 System.out.println("No arg constructor Exam");
	 }
	 
	 
	 public static void main(String[] args) {
		 System.out.println("From Exam main");
		 new Exam();
	}
	{
		System.out.println("Lower block Exam");
	}
}

class Helper{
	
	public Helper() {
		System.out.println("in helper constructor");
	}
	
	public Helper(int i) {
		System.out.println("in helper constructor2: " + i);
	}
	
	public Helper(String x) {
		System.out.println("in helper constructor3: " + x);
	}
}


***Important rule: 

Unlike static class members, though, final instance fields can also be set in a constructor. The constructor is part of the initialization process, so it is allowed to assign final
instance variables. For the exam, you need to know one important rule: by the time the constructor completes, all final instance variables must be assigned a value exactly once.

public class MouseHouse {
 private final int volume;
 private final String name = "The Mouse House"; // Declaration assignment
  static final int test;
 {
 volume = 10; // Instance initializer assignment; DOES COMPILE
 }
 public MouseHouse() {
		test = 22; // DOES NOT COMPILE
		volume = 2; // DOES NOT COMPILE; already assigned in block
		
}
}

public class StaticFinalInstanceVariables {
	
	//non-final variable initialization
	private int x1 = 22;
	private int x;
	{x = 55;}
	static {
		//x = 22; //DOES NOT COMPILE
	}
	
	//final variable initialization
	private final int y = 22;
	private final int y1;
	private final int y3;
	static {
		//y = 224; //DOES NOT COMPILE; Cannot make a static reference to the non-static field y
		//y1 = 222; //DOES NOT COMPILE; Cannot make a static reference to the non-static field y1
	}
	{
		y1 = 55; 
	    //y1 = 22; //DOES NOT COMPILE; already assigned value
	}
	
	
	//static variable initialization
	private static int c1; //non initialed at all; takes default value
	private static int c = 22;
	private static int c0;
	static {
		c = 225; //DOES COMPILE
		c0 = 22;
		c0 = 2222; //can be reassigned value
	}
	
	{c = 66; c0 = 22;} {c1 = 6622;} //DOES COMPILE
	
	
	//static final variable initialization
	private static final int s0;
	
	static {
		s0 = 2;
	}
	{
		//s0 = 2; //DOES NOT COMPILE; static-final cannot be initialized in non-static block
	}
	public StaticFinalInstanceVariables() {
		
		x1 = 32; //DOES COMPILE
		x = 444; //DOES COMPILE
		
		//y = 22; //DOES NOT COMPILE; already assigned
		//y1 = 55; //DOES NOT COMPILE; The final field y1 may already have been assigned
		y3 = 22; //DOES COMPILE; it is not been assigned nowhere before constructor
		
		c = 23; //DOES COMPILE
		c0 = 22; //DOES COMPILE static and non-final variables can be initialized within blocks (static and non static) as well as constructors
		
		//s0 = 2; //DOES NOT COMPILE; static and final variables must be initialized either in-line or in static blocks; not allowed in constructors
	}
}