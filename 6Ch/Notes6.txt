Classes and Inheritance

class B {
class A{}
 class Animal {
    String a;
    public static void main(String[] args) {

        class Test2 {} //Compiler generates ---> Animal$1Test2.class
        class Test {}  //Compiler generates ---> Animal$1Test.class
       
    }
    
    void test() {
    	 class Test3 {
    		 class Test {}
    	 }
    }
    
    class Test3 {}
    class Test {} //Compiler generates ---> Animal$Test.class

	class B{} //DOES NOT COMPILE
}
}

In another class which is in the same package:

public static void main(String[] args) {
		
		B b; //DOES COMPILE
		A a;  //DOES COMPILE
		Test3 t;  //DOES NOT COMPILE
	}

// Bear.java ***
class Bird {}
class Bear {}
class Fish {} 
//DOES COMPILE

// ClownFish.java
protected class ClownFish{} // DOES NOT COMPILE
// BlueTang.java
private class BlueTang {} // DOES NOT COMPILE


this
The 'this' reference refers to the current instance of the
class and can be used to access any member of the class, including inherited members. It can
be used in any instance method, constructor, or instance initializer block. It cannot be used
when there is no implicit instance of the class, such as in a static method or static initializer
block.

this vs super Example

class Insect {
protected int numberOfLegs = 4;
String label = "buggy";
}

public class Beetle extends Insect {
protected int numberOfLegs = 6;
short age = 3;
public void printData() {
 System.out.println(this.label); //Looks in current and within inheritance tree (superclasses); DOES COMPILE
 System.out.println(super.label); //Only looks in superclasses; DOES COMPILE
 System.out.println(this.age); //Finds it in current class;  DOES NOT COMPILE
 System.out.println(super.age); //Only looks in superclasses; DOES NOT COMPILE
 System.out.println(numberOfLegs); //DOES COMPILE  //Looks in current and within inheritance tree (superclasses); Java checks outward, starting with the narrowest scope. 
												  //For this reason, the value of numberOfLegs in the Beetle class is used, and 6 is printed. 
												 //In this example, this.numberOfLegs and super.numberOfLegs refer to different variables with distinct values.; 
 }
 public static void main(String []n) {
 new Beetle().printData();
 }
 }
 
 *** Remember, while 'this' includes current and inherited members, 'super' only includes inherited members.
 
 
 
 constructors
 
public class DemoMain {
	
	public DemoMain(int i) {};
	
	public static void main(String[] args) {
		DemoMain dm = new DemoMain(); //DOES NOT COMPILE - compiler only inserts the default constructor when no constructors are defined.
	}
	***Having only private constructors in a class tells the compiler not to
	   provide a default no-argument constructor. It also prevents other classes
	   from instantiating the class. This is useful when a class has only static
	   methods or the developer wants to have full control of all calls to create
	   new instances of the class.
}

 
this()


public class Hamster {
 private String color;
 private int weight;
  public Hamster() {}
 public Hamster(int weight, String color) { // First constructor
 this.weight = weight;
 this.color = color;
 }
 public Hamster(int weight) { // Second constructor
 this.weight = weight;
 color = "brown";
 }
  void test() {
		 this() //DOES NOT COMPILE
  }
}


***public Hamster(int weight) { // Second constructor
 this(weight, "brown");
 }
 
 When this() is used with parentheses, Java calls another
constructor on the same instance of the class.
Despite using the same keyword, this and this() are very different. The first, 'this',
refers to an instance of the class, while the second, 'this()', refers to a constructor call
within the class. The exam may try to trick you by using both together, so make sure you
know which one to use and why. Calling this() has one special rule you need to know. If you choose to call it, the this() call
must be the first statement in the constructor. The side effect of this is that there can be only
one call to this() in any constructor.

public Hamster(int weight) { //Second constructor
 
    this(weight, "color");
	System.out.println("obj");	
    this(weight, "aaa"); //DOES NOT COMPILE
	
}

public Hamster(int weight) { //Second constructor
 
	System.out.println("obj");	
    this(weight, "color"); //DOES NOT COMPILE
	
}
or
public Hamster(int weight) { //Second constructor
 
    this(weight, "color"); //DOES COMPILE
	System.out.println("obj");
}
or
public Hamster(int weight) { //Second constructor
 
    this(); //DOES COMPILE
	System.out.println("obj");
	 this.weight = weight;
}

public Hamster(int weight) { // Second constructor
	 
	this(weight);	 //DOES NOT COMPILE
}

**Cannot have multiple this() only single this() and it must be first line within constructor; and it cannot call 'itself' using this()

The compiler and cyclic this():

public class Gopher {
 public Gopher(int dugHoles) {
 this(5); // DOES NOT COMPILE
 }
}

public class Gopher {
 public Gopher() {
 this(5); // DOES NOT COMPILE
 }
 public Gopher(int dugHoles) {
 this(); // DOES NOT COMPILE; if we comment out this line, then code compiles OR other line 'this(5);' then code again compiles. Notice we have two compile errors
 }
} 

Rukes for constructors:

■ A class can contain many overloaded constructors, provided the signature for each is distinct.
■ The compiler inserts a default no-argument constructor if no constructors are declared.
■ If a constructor calls this(), then it must be the first line of the constructor.
■ Java does not allow cyclic constructor calls.


--------------------------------------

super()

class Mammal{
	//public Mammal() {System.out.println("ff");} DEAFULT CONSTRUCTOR IS NOT CREATED ***
	public Mammal(int i) {System.out.println("aa");}
	public Mammal(int i, String ff) {System.out.println("ff");}
	public int weight;
}

public class Hamster extends Mammal{
	
	 private String color;
	 private int weight;
	 
	 public Hamster() { this(2, "ffg");}
	 
	 public Hamster(int weight, String color) { // First constructor
		 this(1);

	 }
	 public Hamster(int weight) { // Second constructor
		 super(2, ""); //In case we are not using this() such as current 'public Hamster(int weight) {...}' constructor, java automatically inserts super() if we don't specify and super method call, as we did with 'super(2, "");'	 	
	 }
	 
	 public Hamster(long kk) {
		 super(1,"fFG");
	 }
	 
	 void test() {
		 super(1); //DOES NOT COMPILE
	 }
	 
	 public static void main(String[] args) {
		new Hamster(2,  "");
	}
	 
}
*** The first statement of every constructor is a call to a parent constructor using super() or another constructor in the class using this(). They cannot be together. super() must be on the first line if this() is not used, and vice-reversed.

*** In every subclass constructor implicit super() call is made by the compiler. Obviously, it tries to call no-arg super constructor if it exists. Superclass no-args constructor will not be created
if there is already definde any other superclass constructor. And if that constructor doesn't exist, calls from constructors in a subclass to a superclass no-arg constructor won't be made and we get DOES NOT COMPILE error. 
In that case you have to find appropriate overloaded superclass constructor and call it with super(params1, paramsN) or manually define a default constructor in a superclass.


■ The first line of every constructor is a call to a parent constructor using super() or an overloaded constructor using this().
■ If the constructor does not contain a this() or super() reference, then the compiler automatically inserts super() with no arguments as the first line of the constructor.
■ If a constructor calls super(), then it must be the first line of the constructor


--------------------------------------

Initializing Classes with inheritance and static

***First, we initialize the class, which involves invoking all static members in the class hierarchy, starting with the
highest superclass and working downward. This is sometimes referred to as loading the class. 

The most important rules with class initialization is that it happens at most once for each class.

The Java Virtual Machine (JVM) controls when the class is initialized, although you can
assume the class is loaded before it is used. The class may be initialized when the program
first starts, when a static member of the class is referenced, or shortly before an instance of
the class is created

Initialize Class X
1. If there is a superclass Y of X, then initialize class Y first.
2. Process all static variable declarations in the order in which they appear in the class.
3. Process all static initializers in the order in which they appear in the class.


**Fields and instance initializer blocks are run in the order in which
they appear in the file.

**The constructor runs after all fields and instance initializer blocks
have run.

Evauluate order of initialization for static members in inheritance hierarchy:

Follow all three cases!!!

Example 1:

public class Test{
	 static {System.out.println("in Test static block upper"); }
	 private Helper h1 = new Helper("pera");
	 private static Helper h = new Helper();
	 private static final int x = test32();
	 private String color;
	 
	 {System.out.println("Upper block Test");}
	 
	 static int test32() {
		 System.out.println("in test32...");
		 return 2;
	 }
	 
	 public Test(int i) {
		 this("ggg");
		 System.out.println("yy");
	 }
	 
	 public Test(String i) {
		 System.out.println("ff");
	 }
	 
	 public static void main(String[] args) {
		 System.out.println("From test main");
		 //new Test(1);
		 /**
		  * Output:
		  * 
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			ff
			yy

		  */
		 
		 //Exam.main(args);
		 /**
		  * Output:
		  * 
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in Exam static block upper
			in helper constructor3: djura
			in Exam getObj...
			in Exam static block lower
			From Exam main
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			ff
			yy
			in helper constructor2: 5
			Upper block Exam
			Lower block Exam
			No arg constructor Exam
			
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			ff
			yy
			in helper constructor2: 5
			Upper block Exam
			Lower block Exam
			No arg constructor Exam

		  */
		 
		// new Exam();
		 /**
		  * 
		  * Output:
		  * 
		  * in Test static block upper
			in helper constructor
			in test32...
			in Test static block lower
			From test main
			in Exam static block upper
			in helper constructor3: djura
			in Exam getObj...
			in Exam static block lower
			in helper constructor3: pera
			Upper block Test
			Lower block Test
			ff
			yy
			in helper constructor2: 5
			Upper block Exam
			Lower block Exam
			No arg constructor Exam

		  */
	}
	 
	 {System.out.println("Lower block Test");}
	 
	 static { System.out.println("in Test static block lower");}
}

class Exam extends Test{
	
	 static {System.out.println("in Exam static block upper");}
	
	 private Helper h = new Helper(5);
	 {System.out.println("Upper block Exam");}
	 private static Helper h2 = new Helper("djura");
	 static Object x = getObj();
			 
			 
	 static Object getObj() {
		 System.out.println("in Exam getObj...");
		 return null;
	 }
	 
	 static {System.out.println("in Exam static block lower");}
	 
	 public Exam() {
		 super(1);
		 System.out.println("No arg constructor Exam");
	 }
	 
	 public static void main(String[] args) {
		 System.out.println("From Exam main");
		 new Exam();
		 System.out.println();
		 new Exam();
		 
	}
	{System.out.println("Lower block Exam");}
}

class Helper{
	
	public Helper() {
		System.out.println("in helper constructor");
	}
	
	public Helper(int i) {
		System.out.println("in helper constructor2: " + i);
	}
	
	public Helper(String x) {
		System.out.println("in helper constructor3: " + x);
	}
}


Example2:

public class Animal {
 static { System.out.print("A"); }
}
public class Hippo extends Animal {
 public static void main(String[] grass) {
 System.out.print("C");
 new Hippo();
 new Hippo();
 new Hippo();
 }
 static { System.out.print("B"); }
}

Why the Hippo Program Printed C After AB?

the Hippo class was initialized before the main() method was
executed. This happened because our main() method was inside the class being executed,
so it had to be loaded on startup

Example 3:

class GiraffeFamily {
	static { System.out.print("A"); }
	{ System.out.print("B"); }
	
	public GiraffeFamily(String name) {
		this(1);
		System.out.print("C");
	}
	
	 public GiraffeFamily() {
		 System.out.print("D");
	 }
	
	 public GiraffeFamily(int stripes) {
		 System.out.print("E");
	 }
 }
 public class Okapi extends GiraffeFamily {
	 static { System.out.print("F"); }
	
	 public Okapi(int stripes) {
		 super("sugar");
		 System.out.print("G");
	 }
	 
	 { System.out.print("H"); }
	
	 
	 public static void main(String[] grass) {
		 new Okapi(1);
		 System.out.println();
		 new Okapi(2);
	 }
 }

Example3:

class Canine {
	
	public Canine(boolean t) { logger.append("a"); }
	public Canine() { logger.append("q"); }
	 static { System.out.print("ff");}
	private StringBuilder logger = new StringBuilder();
	protected void print(String v) { System.out.print(v); } //logger.append(v);
	protected String view() { return logger.toString(); }
}

class Fox extends Canine {
	{ System.out.print("d");}
	static {
		System.out.print("m");
	}
 public Fox(long x) { System.out.print("p"); }
 public Fox(String name) {
	 this(2);
	 print("z");
 }
 { System.out.print("r");}
}

 public class Fennec extends Fox {
	 public Fennec(int e) {
		 super("tails");
		 print("j");
	 }
	 static {
		 System.out.print("s");
	 }
	 public Fennec(short f) {
		 super("eevee");
		 print("m");
	 }
	 
	 { System.out.print("g");}

	 public static void main(String... unused) {
		 new Fennec(1);
		 System.out.println();
	 } 
 
 }

Example4:

1: class Antelope {
2: public Antelope(int p) {
3: System.out.print("4");
4: }
5: { System.out.print("2"); }
6: static { System.out.print("1"); }
7: }
8: public class Gazelle extends Antelope {
9: public Gazelle(int p) {
10: super(6);
11: System.out.print("3");
12: }
13: public static void main(String hopping[]) {
14: new Gazelle(0);
15: }
16: static { System.out.print("8"); }
17: { System.out.print("9"); }
18: }

***Important rule: 

Unlike static class members, though, final instance fields can also be set in a constructor. The constructor is part of the initialization process, so it is allowed to assign final
instance variables. For the exam, you need to know one important rule: by the time the constructor completes, all final instance variables must be assigned a value exactly once.

public class MouseHouse {
 private final int volume;
 private final String name = "The Mouse House"; // Declaration assignment
  static final int test;
 {
 volume = 10; // Instance initializer assignment; DOES COMPILE
 }
 public MouseHouse() {
		test = 22; // DOES NOT COMPILE
		volume = 2; // DOES NOT COMPILE; already assigned in block
		
}
}

public class StaticFinalInstanceVariables {
	
	//non-final variable initialization
	private int x1 = 22;
	private int x;
	{x = 55;}
	static {
		//x = 22; //DOES NOT COMPILE
	}
	
	//final variable initialization
	private final int y = 22;
	private final int y1;
	private final int y3;
	//private final int y4; //final instance variables must be assigned a value If they are not assigned a value
    //when they are declared or in an instance initializer, then they must be assigned a value in
    //the constructor declaration. Failure to do so will result in a compiler error on the line that
    //declares the constructor
	//** by the time the constructor completes, all final instance variables must be assigned a value exactly once.
	static {
		//y = 224; //DOES NOT COMPILE; Cannot make a static reference to the non-static field y
		//y1 = 222; //DOES NOT COMPILE; Cannot make a static reference to the non-static field y1
	}
	{
		//y = 222; //DOES NOT COMPILE; already assigned
		y1 = 55; 
	    //y1 = 22; //DOES NOT COMPILE; already assigned value
	}
	
	
	//static variable initialization
	private static int c1; //non initialed at all; takes default value
	private static int c = 22;
	private static int c0;
	static {
		c = 225; //DOES COMPILE
		c0 = 22;
		c0 = 2222; //can be reassigned value
	}
	
	{c = 66; c0 = 22;} {c1 = 6622;} //DOES COMPILE ***Important in non-static block, static variable can be used
	
	
	//static final variable initialization
	private static final int s0;
	
	static {
		s0 = 2;
	}
	{
		//s0 = 2; //DOES NOT COMPILE; static-final cannot be initialized in non-static block
	}
	//** by the time the constructor completes, all final instance variables must be assigned a value exactly once.
	
	public StaticFinalInstanceVariables() { 
		
		x1 = 32; //DOES COMPILE
		x = 444; //DOES COMPILE
		
		//y = 22; //DOES NOT COMPILE; already assigned
		//y1 = 55; //DOES NOT COMPILE; The final field y1 may already have been assigned
		y3 = 22; //DOES COMPILE; it is not been assigned nowhere before constructor
		
		c = 23; //DOES COMPILE
		c0 = 22; //DOES COMPILE static and non-final variables can be initialized within blocks (static and non static) as well as constructors
		
		//s0 = 2; //DOES NOT COMPILE; static and final variables must be initialized either in-line or in static blocks; not allowed in constructors
	}
}


Initializing Classes

1. If there is a superclass Y of X, then initialize class Y first.
2. Process all static variable declarations in the order in which they appear in the class.
3. Process all static initializers in the order in which they appear in the class


Initializing Instances

Initialize Instance of X
1. Initialize class X if it has not been previously initialized.
2. If there is a superclass Y of X, then initialize the instance of Y first.
3. Process all instance variable declarations in the order in which they appear in the class.
4. Process all instance initializers in the order in which they appear in the class.
5. Initialize the constructor, including any overloaded constructors referenced with this().



We conclude this section by listing important rules you should know for the exam:
■ A class is initialized at most once by the JVM before it is referenced or used.
■ All static final variables must be assigned a value exactly once, either when they are declared or in a static initializer.
■ All final fields must be assigned a value exactly once, either when they are declared, in an instance initializer, or in a constructor.
■ Non-final static and instance variables defined without a value are assigned a default value based on their type.
■ Order of initialization is as follows: variable declarations, then initializers, and finally constructors.



--------------------------------------


Initializing final Fields with constructor compiler error


public class MouseHouse {
 private final int volume;
 private final String type;
 {
 this.volume = 10;
 }
 public MouseHouse(String type) {
 this.type = type;
 }
 public MouseHouse() { // DOES NOT COMPILE
 this.volume = 2; // DOES NOT COMPILE
 }
}

In this example, the first constructor that takes a String argument compiles. In terms
of assigning values, each constructor is reviewed individually, which is why the second constructor does not compile. 
First, the constructor fails to set a value for the 'type' variable.
The compiler detects that a value is never set for type and reports an error on the line where
the constructor is declared. Second, the constructor sets a value for the volume variable,
even though it was already assigned a value by the instance initializer.


On the exam, be wary of any instance variables marked final. Make
sure they are assigned a value in the line where they are declared, in an
instance initializer, or in a constructor. They should be assigned a value
only once, and failure to assign a value is considered a compiler error in
the constructor!!!!!


What about final instance variables when a constructor calls another constructor in the
same class? In that case, you have to follow the flow carefully, making sure every final instance variable is assigned a value exactly once. We can replace our previous bad constructor
with the following one that does compile:
 public MouseHouse() {
 this(null);
 }
This constructor does not perform any assignments to any final instance variables, but
it calls the MouseHouse(String) constructor, which we observed compiles without issue.

--------------------------------------

Overriding a Method

To override a method, you must follow a number of rules. The compiler performs the following checks when you override a method:

1. The method in the child class must have the same signature as the method in the parent class.
2. The method in the child class must be at least as accessible as the method in the parent class.
3. The method in the child class may not declare a checked exception that is new or broader than the class of any exception declared in the parent class method.
4. If the method returns a value, it must be the same or a subtype of the method in the parent class, known as covariant return types.
For hiding -> The method defined in the child class must be marked as static if it is marked as static in a parent class.
Put simply, it is method hiding if the two methods are marked static and method overriding if they are not marked static. If one is marked static and the other is not, the
class will not compile.

'same signature' - Remember that a method signature is composed of the name of the
method and method parameters. It does not include the return type,
access modifiers, optional specifiers, or any declared exceptions.

While these rules may seem confusing or arbitrary at first, they are needed for consistency.
Without these rules in place, it is possible to create contradictions within the Java language.


Examples:


Rule1:

Example 1

 class Animal{
	public Object str2(int i) {
		return null;
	}
}

public class Lion extends Animal{
	public Object str2(int i) { //DOES COMPILE; overrides str2
		return null;
	}
}

Example 2:

class Animal{
	public Object str2(int i) {
		return null;
	}
}

public class Lion extends Animal{
	public Object str2(int i, String x) { //DOES COMPILE; doesn't overrides str2
		return null;
	}
}



Rule2: (examples are stayisfying Rule1)

Example1:

class Animal{
	
	protected Object str2(int i) {
		return null;
	}
}

public  class Lion extends Animal{
	
	 Object str2(int i) { //DOES NOT COMPILE
		return null;
	}
	
}

Example2:

class Animal{
	 Object str2(int i) {
		return null;
	}
}

public  class Lion extends Animal{
	
	protected Object str2(int i) { //DOES COMPILE
		return null;
	}
}

Example3:


class Animal{
	 Object str2(int i) {
		return null;
	}
}

public  class Lion extends Animal{
	
	private Object str2(int i) { //DOES NOT COMPILE
		return null;
	}
}


Rule3: (examples are stayisfying Rule1, Rule2)

//IOException (superclass -  BROADER exception !!!!!!!!) checked
//	  /|\
//   / | \
//	   |
//	   |
//FileNotFoundException (subclass - narrower exception; "more focused/narrowed capabilities) checked

Example 1:

class Animal{
	 Object str2(int i) throws FileNotFoundException{
		 if (true) throw new FileNotFoundException();
		return null;
	}
}

public  class Lion extends Animal{
	
	 Object str2(int i) throws FileNotFoundException{  //DOES  COMPILE
		 if (true) throw new FileNotFoundException();
		return null;
	}
}

Example 2:

class Animal{
	protected Object str2(int i) throws FileNotFoundException{
		return null;
	}
}

public  class Lion extends Animal{
	
	 public Object str2(int i) throws IOException {  //DOES NOT COMPILE //cannot throw broader exception
		return null;
	}
}

Example 3:

class Animal{
	protected Object str2(int i) throws FileNotFoundException{
		return null;
	}
}

public  class Lion extends Animal{
	
	 public Object str2(int i) throws FileNotFoundException, RuntimeException{ //DOES  COMPILE, it is okay to throw unchecked exception
		return null;
	}
}

Exmaple 4:

class Animal{
	protected Object str2(int i) throws IOException{
		return null;
	}
}

public  class Lion extends Animal{
	
	 public Object str2(int i) throws FileNotFoundException{ //DOES COMPILE; it can throw narrower exception
		return null;
	}
}


Rule 4 (examples are stayisfying Rule1, Rule2, Rule3):

Example 1:

class Animal{
	protected CharSequence str2(int i) throws IOException{
		return null;
	}
}

public  class Lion extends Animal{
	
	 public Object str2(int i) throws FileNotFoundException{ //DOES NOT COMPILE;
		return null;
	}
}

Example 2:

class Animal{
	protected CharSequence str2(int i) throws IOException{
		return null;
	}
}

public  class Lion extends Animal{
	
	 public StringBuilder str2(int i) throws FileNotFoundException{ //DOES NOT COMPILE;
		return null;
	}
}

Hiding Static Methods

If we have 4 rules in place for method overriding and 'static' keyword is present, then we are talking about method hiding. However, subclass AND superclass must comply have 'static' if other method 
is also having 'static'.

Example1:

 class Animal{
	public  static Object str2(int i) {
		return null;
	}
}

public class Lion extends Animal{
	public  Object str2(int i) { //DOES NOT COMPILE
		return null;
	}
}

Example2:

 class Animal{
	public   Object str2(int i) {
		return null;
	}
}

public class Lion extends Animal{
	public  static Object str2(int i) { //DOES NOT COMPILE; not that in both cases child method is being reported for a compiler error
		return null;
	}
}






--------------------------------------

Abstract classes

■ Only instance methods can be marked abstract within a class, not variables, constructors, or static methods. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
■ An abstract method can only be declared in an abstract class.
■ A non-abstract class that extends an abstract class must implement all inherited abstract methods.
■ Overriding an abstract method follows the existing rules for overriding methods that you learned about earlier in the chapter.


first concrete subclass

public class FirstConcreteSubclass {
	
	public abstract class Animal {
		 abstract String getName(); //DEFINITION of abstract method: 1. no {} 2. obligatory () with optional parameters 3. obligatory ; after () 
		 //4. obligatory abstract
	}
	
	public abstract class BigCat extends Animal {
		 protected abstract void roar(); // it is not required to provide an implementation for the 'getName()' method
	}
	
	public class Lion extends BigCat {
		public String getName() { 
		 return "Lion";
		}
		
		public void roar() {
		 System.out.println("The Lion lets out a loud ROAR!");
		}
	}
	
//	In this sample code, BigCat extends Animal but is marked as abstract; therefore, it
//	is not required to provide an implementation for the getName() method. The class Lion
//	is not marked as abstract, and as the first concrete subclass, it must implement all of the
//	inherited abstract methods not defined in a parent class. All three of these classes compile
//	successfully

}

abstract and final Modifiers

public abstract final class Tortoise { // DOES NOT COMPILE
 public abstract final void walk(); // DOES NOT COMPILE
}

abstract and private Modifiers

public abstract class Whale {
 private abstract void sing(); // DOES NOT COMPILE
}

public class HumpbackWhale extends Whale {
 private void sing() {
	System.out.println("Humpback whale is singing");
 } 
}


In this example, the abstract method sing() defined in the parent class Whale is not
visible to the subclass HumpbackWhale. Even though HumpbackWhale does provide an
implementation, it is not considered an override of the abstract method since the abstract
method is not inherited. The compiler recognizes this in the parent class and reports an error
as soon as private and abstract are applied to the same method.


public abstract class Whale {
 protected abstract void sing();
}
public class HumpbackWhale extends Whale {
 private void sing() { // DOES NOT COMPILE
	System.out.println("Humpback whale is singing");
 }
}

In this modified example, the code will still not compile, but for a completely different
reason. If you remember the rules for overriding a method, the subclass cannot reduce the
visibility of the parent method, sing(). Because the method is declared protected in
the parent class, it must be marked as protected or public in the child class. Even with
abstract methods, the rules for overriding methods must be followed.

abstract and static Modifiers

abstract class Hippopotamus {
 abstract static void swim(); // DOES NOT COMPILE
}