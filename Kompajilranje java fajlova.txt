Opcija A

- src
	Howler.java //no import statement
	HowlerTest.java //no import statement

//Howler.java
public class Howler {
    public void h() {
        System.out.println("howling");
    }
}

//HowlerTest.java
public class HowlerTest {

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}


Iz src:
	javac HowlerTest.java //****IMPORTANT: We get two class file HowlerTest.class and Howler.class
	javac Howler.java //essentially, this is redundant command
	java HowlerTest
	
	
-------------------------------------------------------

Opcija B

- src
	- p2
		Howler.java
	- p1
		HowlerTest.java

//Howler.java
package p2;
public class Howler {
    public void h() {
        System.out.println("howling ");
    }
}
	


//HowlerTest.java
package p1;
import p2.Howler;
public class HowlerTest {

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}

Iz src:
	javac p2/Howler.java 
	javac p1/HowlerTest.java
	java p1/HowlerTest

*//We cannot use . instead of / However, we can use \ or /

-------------------------------------------------------

Opcija C

In this example from HowlerTest (which contains main()) reference is made to Howler and in the same time, from Howler reference is made to HowlerTest.

- src
	- p1
		- p01
			HowlerTest.java
	- p2
		Howler.java

//Howler.java
package p2;
import p1.p01.HowlerTest;

public class Howler {
    public void h() {
        System.out.println("howling " + HowlerTest.MAX);
    }
}

//HowlerTest.java
package p1.p01;
import p2.Howler;

public class HowlerTest {

   public static final int MAX = 5;

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}

iz src:
	javac p2/Howler.java
	javac p1/p01/HowlerTest.java
	java p1/p01/HowlerTest
	
*We could switch order of first and second command and it would still work

-------------------------------------------------------

Opcija D

- src
	Howler.java
	- p1
		HowlerTest.java

//Howler.java
public class Howler {
    public void h() {
        System.out.println("howling ");
    }
}

//HowlerTest.java
package p1;

public class HowlerTest {
    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}


iz src:

javac Howler.java //OK
javac p1/HowlerTest.java //Error; There is no way how to reference Howler from HowlerTest when compiling

-------------------------------------------------------

Opcija E

- src
	Howler.java
	- p1
		HowlerTest.java
		
//Howler.java
package src;
public class Howler {
    public void h() {
        System.out.println("howling ");
    }
}

//HowlerTest.java
package p1;
import src.Howler;
public class HowlerTest {
    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}

iz src:

javac Howler.java //OK
javac p1/HowlerTest.java //Error; package src does not exist; cannot find symbol Howler

*Note related with D and E: if in Eclipse you try to make a class in src directory, Eclipse will create a "default_package" where its going to place that .java file. However, that class cannot be
referenced from any other class in any different subpackages of 'src'. It can only be referenced from other classes which must be in located in 'src' as well.

-------------------------------------------------------

Opcija F

- src
	Howler.java
	- p1
		HowlerTest.java

//Howler.java
import p1.HowlerTest;
public class Howler {
    public void h() {
        System.out.println("howling ");
    }
	
	public static void main(String ...args) {
        HowlerTest h = new HowlerTest();
        h.grouwl();
    }
}

//HowlerTest.java
package p1;

public class HowlerTest {
	public void grouwl(){
		 System.out.println("grouwling");
	}
}

iz src:

javac p1/HowlerTest.java //OK
javac Howler.java //OK
java Howler //OK

-------------------------------------------------------

***MOST IMPOTANT NOTE***

Package names ('package p1.p2...') in .java files must be given that are relative to the position from where we are issuing java/javac commands

Suppose we have the following class in the file /my/directory/named/A/Bird.java. 

Which of the answer options replaces INSERT CODE HERE when added independently if we compile from /my/directory? 

INSERT CODE HERE
public class Bird { }

Answere is: 'package named.A;'

-------------------------------------------------------

Understanding usage of java and javac commands with -classpath options

-------------------------------------------------------

Example 1:

- src
	- p2
		Howler.java
	- p1
		HowlerTest.java


//Howler.java
package p2;
public class Howler {
    public void h() {
        System.out.println("howling");
    }
}

//HowlerTest.java
package p1;
//import p2.Howler; //***IMPORTANT: We are delibertly OMMITING an import statement for a referenced Howler class
public class HowlerTest {

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}


Iz src:
	
	Proces:
	1. Pokusamo da kompajliramo HowlerTest.java koji sadrzi main() i ima referencu na Howler:
	
		javac p1/HowlerTest.java //Error -> 'Error: cannot find symbol Howler h = new Howler();' As you can see, the compiler failed to find the definition for the type "Howler".
		
	2. We now have to compile the dependency class 'Howler.java' and tell compiler where that compile .class is, the next time want to compile HowlerTest.java
		
		javac p2/Howler.java //OK
	
	3. This is just an idea: 
	   
	   javac -classpath [location for any relevant class file in order to compile HowlerTest.java] HowlerTest.java //instead of [] we can pass a "." or /relative/folder/from/src or full location on the disk
	
		Attempts:
	
	   javac -classpath /p2/*.class p1/HowlerTest.java //Error
	   javac -classpath /p2 p1/HowlerTest.java //Error
	   javac -classpath ./p2 p1/HowlerTest.java //Error
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2 p1/HowlerTest.java  //Error
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2\Howler.class p1/HowlerTest.java //Error 
	   
	   Same error: 'java:7: error: cannot find symbolHowler h = new Howler();'
	   
-------------------------------------------------------	   
	  
Example 2:	

- src
	- p2
		Howler.java
	- p1
		HowlerTest.java


//Howler.java
package p2;
public class Howler {
    public void h() {
        System.out.println("howling");
    }
}

//HowlerTest.java
package p1;
import p2.Howler; //***IMPORTANT: We are delibertly INCLUDING an import statement for a referenced Howler class
public class HowlerTest {

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}

Iz src:
	
	Proces:
	1. Pokusamo da kompajliramo HowlerTest.java koji sadrzi main() i ima referencu na Howler:
	
		javac p1/HowlerTest.java //OK
	
	2. Pokusamo da pokrenemo HowlerTest 
		
		java p1/HowlerTest //OK
		
-------------------------------------------------------

Example 3:

- src
	- p2
		Howler.java
	- p1
		HowlerTest.java


//Howler.java
//package p2;   //***IMPORTANT: We are delibertly OMMITING package statement 
public class Howler {
    public void h() {
        System.out.println("howling");
    }
}

//HowlerTest.java
//package p1;  //***IMPORTANT: We are delibertly OMMITING package statement 
//import p2.Howler; //***IMPORTANT: We are delibertly OMMITING an import statement for a referenced Howler class
public class HowlerTest {

    public static void main(String ...args) {
        Howler h = new Howler();
        h.h();
    }
}

Iz src:
	
	1. javac p2/Howler.java
	
	2. javac -classpath /p2 p1/HowlerTest.java                                                  //Error: cannot find symbol Howler h = new Howler();
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2\Howler.class p1/HowlerTest.java //Error: cannot find symbol Howler h = new Howler();
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2 p1/HowlerTest.java				//OK
	   javac -classpath \p2 p1/HowlerTest.java													//Error: cannot find symbol Howler h = new Howler();
	   javac -classpath ./p2 p1/HowlerTest.java													//OK 
	   javac -classpath .\p2 p1/HowlerTest.java													//OK
	   javac -classpath .\p2 p1\HowlerTest.java													//OK
	
	3. java p1/HowlerTest																		// Error: Could not find or load main class p1.HowlerTest; Caused by: java.lang.NoClassDefFoundError: HowlerTest (wrong name: p1/HowlerTest)
	   java -classpath "./p2" p1/HowlerTest 										            // Error: Could not find or load main class p1.HowlerTest; Caused by: java.lang.NoClassDefFoundError: HowlerTest (wrong name: p1/HowlerTest)
	   java -classpath "./p2;./p1" p1/HowlerTest 										        // Error: Could not find or load main class p1.HowlerTest; Caused by: java.lang.NoClassDefFoundError: HowlerTest (wrong name: p1/HowlerTest) 
	   java -classpath "./p2;./p1" HowlerTest													//OK
	   java -classpath ".\p2;.\p1" HowlerTest													//OK
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   	   javac -classpath /p2/*.class p1/HowlerTest.java //Error
	   javac -classpath /p2 p1/HowlerTest.java //Error
	   javac -classpath ./p2 p1/HowlerTest.java //Error
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2 p1/HowlerTest.java  //Error
	   javac -classpath C:\Users\Miljan.Puletic\Desktop\src\p2\Howler.class p1/HowlerTest.java //Error 
	   
	   Same error: 'java:7: error: cannot find symbolHowler h = new Howler();'